{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "Box.svelte",
    "Food.svelte",
    "SnakeSegment.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Food from \"./Food.svelte\"\n  import GridBoxes from \"./GridBoxes.svelte\"\n  import Snake from \"./Snake.svelte\"\n  import Keyboard from \"./Keyboard.svelte\"\n  import {randInt, randomElement} from \"./random.js\"\n\n  let foodIcons = [\n    \"üçß\",\n    \"üç©\",\n    \"üç™\",\n    \"üç´\",\n    \"ü•ê\",\n    \"üßÅ\",\n    \"ü•û\",\n    \"üç∞\",\n    \"üéÇ\",\n    \"üç≠\",\n    \"üçß\",\n    \"ü•ß\",\n    \"ü•Æ\",\n    \"üç¨\",\n    \"üç¶\",\n  ]\n\n  function makeFood() {\n    while(1) {\n      let x = randInt(0, 19)\n      let y = randInt(0, 19)\n      let icon = randomElement(foodIcons)\n      if (findFoodIndex(x, y) !== null) {\n        continue\n      }\n      if (isSnakeOverlap(x, y)) {\n        continue\n      }\n      return {x,y,icon}\n    }\n  }\n\n  function findFoodIndex(x, y) {\n    for (let i=0; i<foods.length; i++) {\n      let f = foods[i]\n      if (x === f.x && y === f.y) {\n        return f\n      }\n    }\n    return null\n  }\n\n  function isSnakeOverlap(x, y) {\n    for (let s of snake) {\n      if (x === s.x && y === s.y) {\n        return true\n      }\n    }\n    return false\n  }\n\n  function makeFoods(count) {\n    for (let i=0; i<count; i++) {\n      foods = [...foods, makeFood()]\n    }\n  }\n\n  function changeDirection() {\n    if (dir === \"down\" || dir === \"up\") {\n      if (keys.ArrowLeft) {\n        dir = \"left\"\n      }\n      if (keys.ArrowRight) {\n        dir = \"right\"\n      }\n    } else if (dir === \"left\" || dir === \"right\") {\n      if (keys.ArrowUp) {\n        dir = \"up\"\n      }\n      if (keys.ArrowDown) {\n        dir = \"down\"\n      }\n    }\n    if (dir === \"up\") {\n      dx = 0\n      dy = -1\n    }\n    if (dir === \"down\") {\n      dx = 0\n      dy = 1\n    }\n    if (dir === \"left\") {\n      dx = -1\n      dy = 0\n    }\n    if (dir === \"right\") {\n      dx = 1\n      dy = 0\n    }\n  }\n\n  function moveSnake() {\n    if (!active) { return }\n    changeDirection()\n    let {x,y} = snake[snake.length-1]\n    x = (x + dx + 20) % 20\n    y = (y + dy + 20) % 20\n\n    if (isSnakeOverlap(x, y)) {\n      active = false\n      return\n    }\n\n    snake = [...snake, {x,y}]\n\n    let i = findFoodIndex(x, y)\n    if (i === null) {\n      snake.shift()\n    } else {\n      score += 1\n      foods.splice(i, 1)\n      foods = [...foods, makeFood()]\n      coinSound.play()\n    }\n  }\n\n  setInterval(moveSnake, 200)\n\n  let coinSound\n  let score = 0\n  let foods = []\n  let snake = [\n    {x: 5, y: 5},\n    {x: 5, y: 6},\n    {x: 5, y: 7},\n  ]\n  let active=true\n  let dir='down'\n  let dx=0\n  let dy=1\n  let keys={}\n\n  makeFoods(20)\n</script>\n\n<style>\nheader {\n  font-size: 400%;\n}\n.grid {\n  border: 1px solid #666;\n  display: grid;\n  margin: auto;\n  width: 800px;\n  height: 800px;\n  grid-template-columns: repeat(20, 1fr);\n  grid-template-rows: repeat(20, 1fr);\n}\n</style>\n\n<header>Score: {score}</header>\n\n<div class=\"grid\">\n  <GridBoxes />\n\n  {#each foods as {x,y,icon}}\n    <Food {x} {y} {icon} />\n  {/each}\n\n  <Snake {snake} />\n</div>\n\n<Keyboard keysChanged={k => keys=k} />\n\n<audio src=\"./audio/coin4.mp3\" preload=auto bind:this={coinSound} />\n",
    "<script>\n  export let x, y;\n</script>\n\n<style>\n  div {\n    background-color: #ddd;\n  }\n  .odd {\n    background-color: #aaa;\n  }\n</style>\n\n<div\n  style=\"grid-row: {y+1}; grid-column: {x+1}\"\n  class:odd={(x+y) % 2 == 1}\n />\n",
    "<script>\n  export let x, y, icon;\n</script>\n\n<style>\n  div {\n    font-size: 30px;\n    background-color: #cfc;\n    text-align: center;\n  }\n</style>\n\n<div style=\"grid-row: {y+1}; grid-column: {x+1}\">\n  {icon}\n</div>\n",
    "<script>\n  export let x, y, head;\n</script>\n\n<style>\n  div {\n    background-color: #f88;\n  }\n  .head {\n    background-color: #fcc;\n  }\n</style>\n\n<div\n  style=\"grid-row: {y+1}; grid-column: {x+1}\"\n  class:head={head}\n />\n"
  ],
  "names": [],
  "mappings": "AAgJA,MAAM,eAAC,CAAC,AACN,SAAS,CAAE,IAAI,AACjB,CAAC,AACD,KAAK,eAAC,CAAC,AACL,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,qBAAqB,CAAE,OAAO,EAAE,CAAC,CAAC,GAAG,CAAC,CACtC,kBAAkB,CAAE,OAAO,EAAE,CAAC,CAAC,GAAG,CAAC,AACrC,CAAC;ACtJC,GAAG,cAAC,CAAC,AACH,gBAAgB,CAAE,IAAI,AACxB,CAAC,AACD,IAAI,cAAC,CAAC,AACJ,gBAAgB,CAAE,IAAI,AACxB,CAAC;ACLD,GAAG,cAAC,CAAC,AACH,SAAS,CAAE,IAAI,CACf,gBAAgB,CAAE,IAAI,CACtB,UAAU,CAAE,MAAM,AACpB,CAAC;ACJD,GAAG,eAAC,CAAC,AACH,gBAAgB,CAAE,IAAI,AACxB,CAAC,AACD,KAAK,eAAC,CAAC,AACL,gBAAgB,CAAE,IAAI,AACxB,CAAC"
}